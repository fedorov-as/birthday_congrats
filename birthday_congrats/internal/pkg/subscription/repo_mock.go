// Code generated by MockGen. DO NOT EDIT.
// Source: subscription.go

// Package subscription is a generated GoMock package.
package subscription

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionsRepo is a mock of SubscriptionsRepo interface.
type MockSubscriptionsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsRepoMockRecorder
}

// MockSubscriptionsRepoMockRecorder is the mock recorder for MockSubscriptionsRepo.
type MockSubscriptionsRepoMockRecorder struct {
	mock *MockSubscriptionsRepo
}

// NewMockSubscriptionsRepo creates a new mock instance.
func NewMockSubscriptionsRepo(ctrl *gomock.Controller) *MockSubscriptionsRepo {
	mock := &MockSubscriptionsRepo{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsRepo) EXPECT() *MockSubscriptionsRepoMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockSubscriptionsRepo) AddSubscription(ctx context.Context, subscriberID, subscriptionID uint32, daysAlert int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscription", ctx, subscriberID, subscriptionID, daysAlert)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockSubscriptionsRepoMockRecorder) AddSubscription(ctx, subscriberID, subscriptionID, daysAlert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockSubscriptionsRepo)(nil).AddSubscription), ctx, subscriberID, subscriptionID, daysAlert)
}

// GetAllSubscriptions mocks base method.
func (m *MockSubscriptionsRepo) GetAllSubscriptions(ctx context.Context) ([]*Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubscriptions", ctx)
	ret0, _ := ret[0].([]*Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubscriptions indicates an expected call of GetAllSubscriptions.
func (mr *MockSubscriptionsRepoMockRecorder) GetAllSubscriptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubscriptions", reflect.TypeOf((*MockSubscriptionsRepo)(nil).GetAllSubscriptions), ctx)
}

// GetSubscriptionsByUser mocks base method.
func (m *MockSubscriptionsRepo) GetSubscriptionsByUser(ctx context.Context, userID uint32) ([]*Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByUser", ctx, userID)
	ret0, _ := ret[0].([]*Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUser indicates an expected call of GetSubscriptionsByUser.
func (mr *MockSubscriptionsRepoMockRecorder) GetSubscriptionsByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUser", reflect.TypeOf((*MockSubscriptionsRepo)(nil).GetSubscriptionsByUser), ctx, userID)
}

// RemoveSubscription mocks base method.
func (m *MockSubscriptionsRepo) RemoveSubscription(ctx context.Context, subscriberID, subscriptionID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubscription", ctx, subscriberID, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubscription indicates an expected call of RemoveSubscription.
func (mr *MockSubscriptionsRepoMockRecorder) RemoveSubscription(ctx, subscriberID, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockSubscriptionsRepo)(nil).RemoveSubscription), ctx, subscriberID, subscriptionID)
}
