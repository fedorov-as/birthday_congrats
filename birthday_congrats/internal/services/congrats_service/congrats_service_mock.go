// Code generated by MockGen. DO NOT EDIT.
// Source: congrats_service.go

// Package congrats_service is a generated GoMock package.
package congrats_service

import (
	session "birthday_congrats/internal/pkg/session"
	user "birthday_congrats/internal/pkg/user"
	context "context"
	reflect "reflect"
	sync "sync"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCongratulationsService is a mock of CongratulationsService interface.
type MockCongratulationsService struct {
	ctrl     *gomock.Controller
	recorder *MockCongratulationsServiceMockRecorder
}

// MockCongratulationsServiceMockRecorder is the mock recorder for MockCongratulationsService.
type MockCongratulationsServiceMockRecorder struct {
	mock *MockCongratulationsService
}

// NewMockCongratulationsService creates a new mock instance.
func NewMockCongratulationsService(ctrl *gomock.Controller) *MockCongratulationsService {
	mock := &MockCongratulationsService{ctrl: ctrl}
	mock.recorder = &MockCongratulationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCongratulationsService) EXPECT() *MockCongratulationsServiceMockRecorder {
	return m.recorder
}

// GetSubscriptionsByUser mocks base method.
func (m *MockCongratulationsService) GetSubscriptionsByUser(ctx context.Context) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByUser", ctx)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByUser indicates an expected call of GetSubscriptionsByUser.
func (mr *MockCongratulationsServiceMockRecorder) GetSubscriptionsByUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByUser", reflect.TypeOf((*MockCongratulationsService)(nil).GetSubscriptionsByUser), ctx)
}

// Login mocks base method.
func (m *MockCongratulationsService) Login(ctx context.Context, username, password string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockCongratulationsServiceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockCongratulationsService)(nil).Login), ctx, username, password)
}

// Logout mocks base method.
func (m *MockCongratulationsService) Logout(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockCongratulationsServiceMockRecorder) Logout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockCongratulationsService)(nil).Logout), ctx)
}

// Register mocks base method.
func (m *MockCongratulationsService) Register(ctx context.Context, username, password, email, birth string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, username, password, email, birth)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockCongratulationsServiceMockRecorder) Register(ctx, username, password, email, birth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCongratulationsService)(nil).Register), ctx, username, password, email, birth)
}

// StartAlert mocks base method.
func (m *MockCongratulationsService) StartAlert(ctx context.Context, timeStart time.Time, period time.Duration, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartAlert", ctx, timeStart, period, wg)
}

// StartAlert indicates an expected call of StartAlert.
func (mr *MockCongratulationsServiceMockRecorder) StartAlert(ctx, timeStart, period, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAlert", reflect.TypeOf((*MockCongratulationsService)(nil).StartAlert), ctx, timeStart, period, wg)
}

// Subscribe mocks base method.
func (m *MockCongratulationsService) Subscribe(ctx context.Context, subscriptionID uint32, daysAlert int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, subscriptionID, daysAlert)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCongratulationsServiceMockRecorder) Subscribe(ctx, subscriptionID, daysAlert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCongratulationsService)(nil).Subscribe), ctx, subscriptionID, daysAlert)
}

// Unsubscribe mocks base method.
func (m *MockCongratulationsService) Unsubscribe(ctx context.Context, subscriptionID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockCongratulationsServiceMockRecorder) Unsubscribe(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockCongratulationsService)(nil).Unsubscribe), ctx, subscriptionID)
}
